//@version=5
strategy(title="StochasticRSIWeighted", shorttitle="StochasticRSIWeighted",
         default_qty_type = strategy.percent_of_equity,default_qty_value = 100,
         commission_type = strategy.commission.percent,commission_value = 0.02)
smoothK = input.int(3, "K", minval=1)
smoothD = input.int(3, "D", minval=1)
lengthRSI = input.int(14, "RSI Length", minval=1)
lengthStoch = input.int(14, "Stochastic Length", minval=1)
Len = input.int(20, "Len", minval=1)
start_time = input.time(defval=timestamp("1 Apr 2023 00:00 +0300"),confirm = true)
end_time = input.time(defval=timestamp("1 May 2023 00:00 +0300"),confirm = true)
Percent = input.float(2, title="SL%")
// ===================================================
rsi1 = ta.rsi(close, lengthRSI)
k = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)
d = ta.sma(k, smoothD)
h0 = hline(80, "Upper Band", color=#787B86)
h1 = hline(20, "Lower Band", color=#787B86)
GetLine(Length,src)=>
    SSrc = math.sum(src,Length)
    Line = 0.0
    for i=0 to Length-1
        Line := Line+close[i]*src[i]/SSrc
    Line
Line1 = GetLine(Len,k)
Line2 = GetLine(Len,d)
// =======================================================
plot(k, "K", color=#2962FF)
plot(d, "D", color=#FF6D00)
hline(50, "Middle Band", color=color.new(#787B86, 50))
fill(h0, h1, color=color.rgb(33, 150, 243, 90), title="Background")
// =================================================
// =============================================
LCond = ta.crossover(Line1,Line2)
SCond = ta.crossunder(Line1,Line2)
CloseLong = ta.crossunder(Line1,Line2)
CloseShort = ta.crossover(Line1,Line2)
LEON = strategy.position_size>0
SEON = strategy.position_size<0
SLL = 0.0
SLS = 0.0
TimeCond= time>=start_time and time<=end_time
if LCond and TimeCond
    strategy.entry('Long',strategy.long)
    SLL := (1-Percent/100)*close
if LEON
    SLL := SLL[1]
if CloseLong or (TimeCond==false and LEON)
    strategy.close('Long')
if SCond and TimeCond
    strategy.entry('Short',strategy.short)
    SLS := (1+Percent/100)*close
if SEON
    SLS := SLS[1]
if CloseShort or (TimeCond==false and SEON)
    strategy.close('Short')

strategy.exit('ExL','Long',stop = SLL)
strategy.exit('ExS','Short',stop = SLS)
// ===========================================================================================================================================================
Lev = input.int(defval=10,title='Levrage')
commision = input.float(defval=0.02,title='Commision %')
avgGrossProfit(val) =>
    Profit = 0.0
    if strategy.closedtrades.size(val)>0
        Profit := 100*(strategy.closedtrades.exit_price(val)-strategy.closedtrades.entry_price(val))/strategy.closedtrades.entry_price(val)
    else
        Profit :=100*(-strategy.closedtrades.exit_price(val)+strategy.closedtrades.entry_price(val))/strategy.closedtrades.entry_price(val)
    Profit :=  Profit - 2*commision
PrfPT = avgGrossProfit(strategy.closedtrades-1)
EquityVal=1.0
if strategy.closedtrades==0
    EquityVal:=1
else
    if strategy.closedtrades>strategy.closedtrades[1]
        EquityVal:=(1+Lev*PrfPT/100)*EquityVal[1]
    else
        EquityVal:=EquityVal[1]
var testTable = table.new(position = position.top_right, columns = 2, rows = 1, bgcolor = color.yellow, border_width = 1)
if barstate.isconfirmed
    table.cell(table_id = testTable, column = 0, row = 0, text = "Profit is ")
    table.cell(table_id = testTable, column = 1, row = 0, text = str.tostring((EquityVal-1)*100)+'%', bgcolor=color.teal)
// ===========================================================================================================================================================