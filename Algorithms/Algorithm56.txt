// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© aminmasood54

//@version=5
strategy("PRF+SSL",overlay=true)
import aminmasood54/Polynomial3/2 as PR
// import aminmasood54/Polynomial3/3 as PR
AST = input.bool(true,title = 'Short',group = 'Trade')
ALT = input.bool(true,title = 'Long',group = 'Trade')
TRSL = input.bool(false,title = 'TrailingSL',group = 'Trade')
// ===============================================Data
Start_time = input.time(timestamp("1 Jan 2020 00:00 +0000"), "Start Date")
// ==============================================
BLen = input.int(20,title = 'Back length',group = 'Poly',minval = 2)
NONP = input.int(3,title = 'Number of new points',group = 'Poly',minval = 1)
DOP = input.int(4,title = 'Degree of polynomial',group = 'Poly')
// ===============================================
ALen = input.int(14,title = 'Atr length',group = 'ATR')
AmT = input.float(2,title = 'TP Atr multiplier',group = 'ATR',step = 0.5)
result = ta.rma(ta.tr(true), 14)
upper = high + result * AmT
lower = low - result * AmT
// ===============================================
// ===============================================
ConsiderError = input.bool(defval = false,title = 'Consider Error',group = 'Error')
MaximumError = input.float(defval = 0.01,title = 'Maximum Error',minval = 0.01,maxval = 2,step = 0.01,group = 'Error')
//===================================================
if BLen<(DOP+1)
    BLen:=DOP+1
[Y,Error] = PR.PolyNomial(Dop = DOP,n = BLen,nonp = NONP)
maxVal = matrix.max(Y)
minVal = matrix.min(Y)
plot(maxVal)
plot(minVal,color=color.red)
// ========================================Operations
len = input(title='Period', defval=10)
smaHigh = ta.sma(high, len)
smaLow = ta.sma(low, len)
Hlv = int(na)
Hlv := close > smaHigh ? 1 : close < smaLow ? -1 : Hlv[1]
sslDown = Hlv < 0 ? smaHigh : smaLow
sslUp = Hlv < 0 ? smaLow : smaHigh
// ===============================================
BCond = maxVal>upper and sslDown<sslUp
SCond = minVal<lower and sslDown>sslUp
bgcolor(color = BCond?color.new(color.green,60):SCond?color.new(color.red,60):na)
// ================================
TCond = (SCond or BCond) or (strategy.position_size!=0)
PCond = time>Start_time
ActiveTrade = TCond and PCond
TP = 0.0
SL = 0.0
EP = 0.0
// ====================
LEON = strategy.position_size>0
LE = strategy.position_size==0 and BCond
if (LE and ALT)
    strategy.entry("LE",strategy.long)
    TP:=upper
    SL:=lower
    EP:=close
if LEON
    TP:=TP[1]
    SL:=SL[1]
    EP:=EP[1]
if TRSL
    if (high>TP and low>SL and lower>EP)
        TP:=upper
        SL:=lower
        EP:=close
    else if (high>TP and low<SL) or (high<TP and low<SL) or (high>TP and low>SL and lower<EP)
        strategy.close('LE')
else
    if (high>TP and low>SL) or (high<TP and low<SL) or (high<TP and low<SL)
        strategy.close('LE')
// =================================
SEON = strategy.position_size<0
SE = strategy.position_size==0 and SCond
if (SE and AST)
    strategy.entry("SE",strategy.short)
    TP:=lower
    SL:=upper
    EP:=close
if SEON
    TP:=TP[1]
    SL:=SL[1]
    EP:=EP[1]
if TRSL
    if (low<TP and high<SL and upper<EP)
        TP:=lower
        SL:=upper
        EP:=close
    else if (low<TP and high>SL) or (low>TP and high>SL) or (low<TP and high<SL and upper>EP)
        strategy.close('SE')
else
    if (low<TP and high<SL) or (low<TP and high>SL) or (low>TP and high>SL)
        strategy.close('SE')
// =================================
plot(TP,color=color.green)
plot(SL,color=color.red)