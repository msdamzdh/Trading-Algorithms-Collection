//@version=5
strategy(title="Relative Strength Index", shorttitle="RSI", format=format.price, precision=2)

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(14, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ma(rsi, maLengthInput, maTypeInput)
isBB = maTypeInput == "Bollinger Bands"

plot(rsi, "RSI", color=#7E57C2)
plot(rsiMA, "RSI-based MA", color=color.yellow)
rsiUpperBand = hline(70, "RSI Upper Band", color=#787B86)
hline(50, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(30, "RSI Lower Band", color=#787B86)
fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
bbUpperBand = plot(isBB ? rsiMA + ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Upper Bollinger Band", color=color.green)
bbLowerBand = plot(isBB ? rsiMA - ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Lower Bollinger Band", color=color.green)
fill(bbUpperBand, bbLowerBand, color= isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill")
// ===============================================
ALen = input.int(14,title = 'Atr length',group = 'ATR')
AmT = input.float(2,title = 'TP Atr multiplier',group = 'ATR',step = 0.5)
result = ta.rma(ta.tr(true), 14)
upper = high + result * AmT
lower = low - result * AmT
// =================================================
AST = input.bool(true,title = 'Short',group = 'Trade')
ALT = input.bool(true,title = 'Long',group = 'Trade')
TRSL = input.bool(false,title = 'TrailingSL',group = 'Trade')
EMA = ta.ema(close,200)
// ===============================================Data
BCond = false
SCond = false
Start_time = input.time(timestamp("1 Jan 2020 00:00 +0000"), "Start Date")
A = (rsi-rsi[rsiLengthInput])*100/rsi[rsiLengthInput]
plot(A,color=color.black)
bgcolor(color=SCond?color.new(color.red,60):na)
TCond = (SCond or BCond) or (strategy.position_size!=0)
PCond = time>Start_time
ActiveTrade = TCond and PCond
TP = 0.0
SL = 0.0
// =================================
SEON = strategy.position_size<0
SE = strategy.position_size==0 and SCond and close<EMA
if (SE and AST)
    strategy.entry("SE",strategy.short)
    TP:=lower
    SL:=upper
if SEON
    TP:=TP[1]
    SL:=SL[1]
// if SEON and ta.crossover(A,0)
//     strategy.close('SE')
strategy.exit('Exit SE','SE',limit=TP,stop=SL)