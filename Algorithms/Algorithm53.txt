// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© aminmasood54

//@version=5
strategy("Polynomial+Swing")
// import aminmasood54/Polynomial/9 as PR
import aminmasood54/Polynomial2/1 as PR
AST = input.bool(true,title = 'Short',group = 'Trade')
ALT = input.bool(true,title = 'Long',group = 'Trade')
TRSL = input.bool(false,title = 'TrailingSL',group = 'Trade')
// ===============================================Data
Start_time = input.time(timestamp("1 Jan 2020 00:00 +0000"), "Start Date")
// =============================================
BLen = input.int(2,title = 'Back length',group = 'Poly',minval = 2)
DOP = input.int(8,title = 'Degree of polynomial',group = 'Poly')
// ===============================================
ALen = input.int(14,title = 'Atr length',group = 'ATR')
AmT = input.float(2,title = 'TP Atr multiplier',group = 'ATR',step = 0.5)
result = ta.rma(ta.tr(true), 14)
upper = high + result * AmT
lower = low - result * AmT
// ===============================================
ConsiderError = input.bool(defval = false,title = 'Consider Error',group = 'Error')
MaximumError = input.float(defval = 0.01,title = 'Maximum Error',minval = 0.01,maxval = 2,step = 0.01,group = 'Error')
//===================================================
error = array.new<float>(DOP)
Y = matrix.new<float>(1,1,0)
for i=1 to DOP
    length = BLen+i+1
    step2 = math.floor(length/i)
    if step2==0
        step2:=1
    [y,Error] = PR.PolyNomial(Dop = i,n = length,step = step2,nonp = 1)
    array.set(error,i-1,Error)
    matrix.concat(Y,matrix.transpose(y))

matrix.remove_row(Y,0)
minErr = array.min(error)
maxVal = matrix.max(Y)
minVal = matrix.min(Y)
plot(minErr)
// =====================Swing
ema_value = input(5)
sma_value = input(50)
ema1 = ta.ema(close, ema_value)
sma2 = ta.sma(close, sma_value)
rs = ta.rsi(close, 14)

iff_1 = high < sma2 ? color.red : color.yellow
iff_2 = low > sma2 ? color.lime : iff_1
mycolor = rs >= 85 or rs <= 15 ? color.yellow : iff_2

hl = input.int(80, title='Overbought limit of RSI', step=1)
ll = input.int(20, title='Oversold limit of RSI', step=1)


buyexit = ta.crossunder(rs, hl)
sellexit = ta.crossover(rs, ll)
sellcall = ta.crossover(sma2, ema1) and open > close
buycall = ta.crossunder(sma2, ema1) and high > sma2
// ========================================Operations
BCond = maxVal>upper and buycall
SCond = minVal<lower and sellcall
// BCond = maxVal>upper
// SCond = minVal<lower
bgcolor(color = BCond?color.new(color.green,60):SCond?color.new(color.red,60):na)
// ================================
TCond = (SCond or BCond) or (strategy.position_size!=0)
PCond = time>Start_time
ActiveTrade = TCond and PCond
// ====================
if (ActiveTrade)
    if AST
        SE = strategy.position_size==0 and SCond
        TPS=0.0
        SLS=0.0
        SIndex = 0
        if SE
            strategy.entry("SE",strategy.short)
            TPS:=lower
            SLS:=upper
        else
            TPS:=TPS[1]
            SLS:=SLS[1]
        if TRSL
            if strategy.position_size<0 and low<TPS
                SLS:=TPS
                TPS:=(lower+low)/2
            strategy.exit("EXSE","SE",stop = SLS)
        else
            strategy.exit("EXSE","SE",stop = SLS,limit = TPS)
    if ALT
        LE = strategy.position_size==0 and BCond
        TPL=0.0
        SLL=0.0
        LIndex = 0
        if LE
            strategy.entry("LE",strategy.long)
            TPL:=upper
            SLL:=lower
        else
            TPL:=TPL[1]
            SLL:=SLL[1]
        if TRSL
            if strategy.position_size>0 and high>TPL
                SLL:=TPL
                TPL:=(upper+high)/2
            strategy.exit("EXLE","LE",stop = SLL)
        else
            strategy.exit("EXLE","LE",stop = SLL,limit=TPL)