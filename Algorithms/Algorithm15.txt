// This source code is free to use, copy, and alter in any way you choose.
// ...but credit is always nice :)

//@version=5
//@author=JayRogers

strategy('HARSI', 'HARSI •', false,
         default_qty_type = strategy.percent_of_equity,default_qty_value = 100,
         commission_type = strategy.commission.percent,commission_value = 0.02)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// ====== ABOUT THIS INDICATOR                                                //
//                                                                            //
//  - RSI based Heikin Ashi candle oscillator                                 //
//                                                                            //
// ====== ARTICLES and FURTHER READING                                        //
//                                                                            //
//  - https://www.investopedia.com/terms/h/heikinashi.asp                     //
//                                                                            //
//    "Heikin-Ashi is a candlestick pattern technique that aims to reduce     //
//    some of the market noise, creating a chart that highlights trend        //
//    direction better than typical candlestick charts"                       //
//                                                                            //
// ====== REASON FOR STUDY                                                    //
//                                                                            //
//  - Mostly experimental. I wanted to see if I could translate RSI into a    //
//    Heikin Ashi function and retain it's oscillating nature. That goal      //
//    was met more easily than I anticipated with quite delightful results.   //
//                                                                            //
// ====== DISCLAIMER                                                          //
//                                                                            //
//    Any trade decisions you make are entirely your own responsibility.      //
//    I've made an effort to squash all the bugs, but you never know!         //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                           ====== TOOLTIPS ======                           //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

string TT_HARSI = 'Period for the RSI calculations used to generate the' + 'candles. This seperate from the RSI plot/histogram length.'

string TT_PBIAS = 'Smoothing feature for the OPEN of the HARSI candles.' + '\n\nIncreases bias toward the prior open value which can' + ' help provide better visualisation of trend strength.' + '\n\n** By changing the Open values, High and Low can also' + ' be distorted - however Close will remain unchanged.'

string TT_SMRSI = 'This option smoothes the RSI in a manner similar to HA' + ' open, but uses the realtime rsi rather than the prior' + ' close value.'

string TT_STOCH = 'Uses the RSI generated by the above settings, and as such' + ' will be affected by the smoothing option.'

string TT_STFIT = 'Adjusts the vertical scaling of the stochastic, can help' + ' to prevent distortion of other data in the channel.' + '\n\nHas no impact cross conditions.'

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                            ====== INPUTS ======                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

// -- Candle config

string GROUP_CAND = 'Config » HARSI Candles'
i_lenHARSI = input.int(14, 'Length', group=GROUP_CAND, minval=1, tooltip=TT_HARSI)
i_smoothing = input.int(1, 'Open Smoothing', group=GROUP_CAND, minval=1, maxval=100, tooltip=TT_PBIAS)
string INLINE_COL = 'Colour Pallette'
i_colUp = input.color(color.teal, 'Colour Pallette  ', group=GROUP_CAND, inline=INLINE_COL)
i_colDown = input.color(color.red, ' ', group=GROUP_CAND, inline=INLINE_COL)
i_colWick = input.color(color.gray, ' ', group=GROUP_CAND, inline=INLINE_COL)

// -- RSI plot config

string GROUP_PLOT = 'Config » RSI Plot'
i_source = input.source(ohlc4, 'Source', group=GROUP_PLOT)
i_lenRSI = input.int(7, 'Length', group=GROUP_PLOT, minval=1)
i_mode = input.bool(true, 'Smoothed Mode RSI?', group=GROUP_PLOT, tooltip=TT_SMRSI)
i_showPlot = input.bool(true, 'Show RSI Plot?', group=GROUP_PLOT)
i_showHist = input.bool(true, 'Show RSI Histogram?', group=GROUP_PLOT)

// -- Stochastic RSI plots config

// string GROUP_STOCH = 'Config » Stochastic RSI Plot'
// string INLINE_STDS = 'Stoch Draw States'
// i_showStoch = input.bool(false, 'Show Stochastic? ', group=GROUP_STOCH, inline=INLINE_STDS, tooltip=TT_STOCH)
// i_ribbon = input.bool(true, 'Ribbon?', group=GROUP_STOCH, inline=INLINE_STDS)
// i_smoothK = input.int(3, 'Smoothing K', group=GROUP_STOCH, minval=1)
// i_smoothD = input.int(3, 'Smoothing D', group=GROUP_STOCH, minval=1)
// i_stochLen = input.int(14, 'Stochastic Length', group=GROUP_STOCH, minval=1)
// i_stochFit = input.int(80, 'Stoch Scaling %', group=GROUP_STOCH, minval=1, maxval=100, tooltip=TT_STFIT)

// -- Channel OB/OS config

string GROUP_CHAN = 'Config » OB/OS Boundaries'
i_upper = input.int(20, 'OB', group=GROUP_CHAN, inline='OB', minval=1, maxval=50)
i_upperx = input.int(30, 'OB Extreme', group=GROUP_CHAN, inline='OB', minval=1, maxval=50)

i_lower = input.int(-20, 'OS', group=GROUP_CHAN, inline='OS', minval=-50, maxval=-1)
i_lowerx = input.int(-30, 'OS Extreme', group=GROUP_CHAN, inline='OS', minval=-50, maxval=-1)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                          ====== FUNCTIONS ======                           //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

//  zero median rsi helper function, just subtracts 50.
f_zrsi(_source, _length) =>
    ta.rsi(_source, _length) - 50

//  zero median stoch helper function, subtracts 50 and includes % scaling
// f_zstoch(_source, _length, _smooth, _scale) =>
//     float _zstoch = ta.stoch(_source, _source, _source, _length) - 50
//     float _smoothed = ta.sma(_zstoch, _smooth)
//     float _scaled = _smoothed / 100 * _scale
//     _scaled

//  mode selectable rsi function for standard, or smoothed output
f_rsi(_source, _length, _mode) =>

    //  get base rsi
    float _zrsi = f_zrsi(_source, _length)

    //  smoothing in a manner similar to HA open, but rather using the realtime
    //  rsi in place of the prior close value.
    var float _smoothed = na
    _smoothed := na(_smoothed[1]) ? _zrsi : (_smoothed[1] + _zrsi) / 2

    //  return the requested mode
    _mode ? _smoothed : _zrsi

//  RSI Heikin-Ashi generation function
f_rsiHeikinAshi(_length) =>

    //  get close rsi
    float _closeRSI = f_zrsi(close, _length)

    //  emulate "open" simply by taking the previous close rsi value
    float _openRSI = nz(_closeRSI[1], _closeRSI)

    //  the high and low are tricky, because unlike "high" and "low" by
    //  themselves, the RSI results can overlap each other. So first we just go
    //  ahead and get the raw results for high and low, and then..
    float _highRSI_raw = f_zrsi(high, _length)
    float _lowRSI_raw = f_zrsi(low, _length)
    //  ..make sure we use the highest for high, and lowest for low
    float _highRSI = math.max(_highRSI_raw, _lowRSI_raw)
    float _lowRSI = math.min(_highRSI_raw, _lowRSI_raw)

    //  ha calculation for close
    float _close = (_openRSI + _highRSI + _lowRSI + _closeRSI) / 4

    //  ha calculation for open, standard, and smoothed/lagged
    var float _open = na
    _open := na(_open[i_smoothing]) ? (_openRSI + _closeRSI) / 2 : (_open[1] * i_smoothing + _close[1]) / (i_smoothing + 1)

    //  ha high and low min-max selections
    float _high = math.max(_highRSI, math.max(_open, _close))
    float _low = math.min(_lowRSI, math.min(_open, _close))

    //  return the OHLC values
    [_open, _high, _low, _close]

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                   ====== SERIES, LINES and LABELS ======                   //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

//  standard, or ha smoothed rsi for the line plot and/or histogram
float RSI = f_rsi(i_source, i_lenRSI, i_mode)

//  stoch stuff
// float StochK = f_zstoch(RSI, i_stochLen, i_smoothK, i_stochFit)
// float StochD = ta.sma(StochK, i_smoothD)

//  get OHLC values to use in the plotcandle()
[O, H, L, C] = f_rsiHeikinAshi(i_lenHARSI)

//  candle body colouring
color bodyColour = C > O ? i_colUp : i_colDown
color wickColour = i_colWick

//  shadow, invisible
color colShadow = color.rgb(0, 0, 0, 20)
color colNone = color.rgb(0, 0, 0, 100)

//  rsi color
color colRSI = color.rgb(250, 200, 50, 0)

//  stoch ribbon fill
// color colStochK = color.new(#0094FF, 0)
// color colStochD = color.new(#FF6A00, 0)
// color colStochFill = StochK >= StochD ? color.new(colStochK, 50) : color.new(colStochD, 50)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                     ====== DRAWING and PLOTTING ======                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

//  zero median RSI channel hlines
upperx = hline(i_upperx, 'OB Extreme', color.new(color.silver, 60))
upper = hline(i_upper, 'OB', color.new(color.silver, 80))
median = hline(0, 'Median', color.orange, hline.style_dotted)
lower = hline(i_lower, 'OS', color.new(color.silver, 80))
lowerx = hline(i_lowerx, 'OS Extreme', color.new(color.silver, 60))

//  channel fill
fill(upper, upperx, color.new(color.red, 90), title='Background Fill OB')
fill(upper, lower, color.new(color.blue, 90), title='Background Channel')
fill(lower, lowerx, color.new(color.green, 90), title='Background Fill OS')

//  histogram first, so it is on the bottom of the plot/candle draw stack
plot(i_showHist ? RSI : na, 'RSI Histogram', color.new(color.silver, 80), 1, plot.style_histogram)

//  make our HA rsi candles
plotcandle(O, H, L, C, 'HARSI', bodyColour, wickColour, bordercolor=bodyColour)


//  RSI overlay plot
plot(i_showPlot ? RSI : na, 'RSI Shadow', colShadow, 3)
plot_rsi = plot(i_showPlot ? RSI : na, 'RSI Overlay', colRSI, 1)

//  Stochastic RSI plots and fill
// plot(i_showStoch ? StochK : na, 'Stoch K Shadow', not i_ribbon ? colShadow : colNone, 3)
// plot(i_showStoch ? StochD : na, 'Stoch D Shadow', not i_ribbon ? colShadow : colNone, 3)
// plot_stochK = plot(i_showStoch ? StochK : na, 'Stoch K', not i_ribbon ? colStochK : colNone, 1)
// plot_stochD = plot(i_showStoch ? StochD : na, 'Stoch D', not i_ribbon ? colStochD : colNone, 1)
// fill(plot_stochK, plot_stochD, i_ribbon ? colStochFill : na, transp=90)
// ===============================================
TPP = input.float(defval = 1,title = 'TPP',step = 0.1)
SLP = input.float(defval = 1,title = 'SLP',step = 0.1)
Level = input.int(defval = 20,title = 'Level',step = 1)
LenP = input.int(defval = 20,title = 'LenP',step = 1)

HP = 0.0
LP = 0.0
HP := nz(ta.pivothigh(high,LenP,LenP),HP[1])
LP := nz(ta.pivotlow(low,LenP,LenP),LP[1])

lcond = math.abs(close-HP)>math.abs(close-LP)
scond = math.abs(close-HP)<math.abs(close-LP)

LCond = C>O and C[1]<O[1] and C<-Level and lcond
SCond = C<O and C[1]>O[1] and C>Level and scond

SLL = 0.0
SLS = 0.0
TPL = 0.0
TPS = 0.0
if LCond
    strategy.entry('Long',strategy.long)
    SLL := close*(1-SLP/100)
    TPL := close*(1+TPP/100)
if strategy.position_size>0
    SLL := SLL[1]
    TPL := TPL[1]
if SCond
    strategy.entry('Short',strategy.short)
    SLS := close*(1+SLP/100)
    TPS := close*(1-TPP/100)
if strategy.position_size<0
    SLS := SLS[1]
    TPS := TPS[1]
strategy.exit('ExL','Long',limit = TPL,stop = SLL)
strategy.exit('ExS','Short',limit = TPS,stop = SLS)


